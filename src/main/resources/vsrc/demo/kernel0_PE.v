// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module kernel0_PE (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fifo_A_PE_1_12_dout,
        fifo_A_PE_1_12_num_data_valid,
        fifo_A_PE_1_12_fifo_cap,
        fifo_A_PE_1_12_empty_n,
        fifo_A_PE_1_12_read,
        fifo_B_PE_1_1_dout,
        fifo_B_PE_1_1_num_data_valid,
        fifo_B_PE_1_1_fifo_cap,
        fifo_B_PE_1_1_empty_n,
        fifo_B_PE_1_1_read,
        fifo_B_PE_2_1_din,
        fifo_B_PE_2_1_num_data_valid,
        fifo_B_PE_2_1_fifo_cap,
        fifo_B_PE_2_1_full_n,
        fifo_B_PE_2_1_write,
        fifo_A_PE_1_2_din,
        fifo_A_PE_1_2_num_data_valid,
        fifo_A_PE_1_2_fifo_cap,
        fifo_A_PE_1_2_full_n,
        fifo_A_PE_1_2_write,
        fifo_C_drain_PE_1_1_din,
        fifo_C_drain_PE_1_1_num_data_valid,
        fifo_C_drain_PE_1_1_fifo_cap,
        fifo_C_drain_PE_1_1_full_n,
        fifo_C_drain_PE_1_1_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] fifo_A_PE_1_12_dout;
input  [2:0] fifo_A_PE_1_12_num_data_valid;
input  [2:0] fifo_A_PE_1_12_fifo_cap;
input   fifo_A_PE_1_12_empty_n;
output   fifo_A_PE_1_12_read;
input  [63:0] fifo_B_PE_1_1_dout;
input  [2:0] fifo_B_PE_1_1_num_data_valid;
input  [2:0] fifo_B_PE_1_1_fifo_cap;
input   fifo_B_PE_1_1_empty_n;
output   fifo_B_PE_1_1_read;
output  [63:0] fifo_B_PE_2_1_din;
input  [2:0] fifo_B_PE_2_1_num_data_valid;
input  [2:0] fifo_B_PE_2_1_fifo_cap;
input   fifo_B_PE_2_1_full_n;
output   fifo_B_PE_2_1_write;
output  [63:0] fifo_A_PE_1_2_din;
input  [2:0] fifo_A_PE_1_2_num_data_valid;
input  [2:0] fifo_A_PE_1_2_fifo_cap;
input   fifo_A_PE_1_2_full_n;
output   fifo_A_PE_1_2_write;
output  [31:0] fifo_C_drain_PE_1_1_din;
input  [2:0] fifo_C_drain_PE_1_1_num_data_valid;
input  [2:0] fifo_C_drain_PE_1_1_fifo_cap;
input   fifo_C_drain_PE_1_1_full_n;
output   fifo_C_drain_PE_1_1_write;

reg ap_idle;
reg fifo_A_PE_1_12_read;
reg fifo_B_PE_1_1_read;
reg fifo_B_PE_2_1_write;
reg fifo_A_PE_1_2_write;
reg fifo_C_drain_PE_1_1_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln738_reg_808;
reg    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] brmerge_reg_852;
reg   [0:0] brmerge_reg_852_pp0_iter12_reg;
reg    ap_block_state14_pp0_stage0_iter13;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln738_fu_261_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    fifo_A_PE_1_12_blk_n;
wire    ap_block_pp0_stage0;
reg    fifo_A_PE_1_2_blk_n;
reg    fifo_B_PE_1_1_blk_n;
reg    fifo_B_PE_2_1_blk_n;
reg    fifo_C_drain_PE_1_1_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln738_reg_808_pp0_iter1_reg;
reg   [0:0] icmp_ln738_reg_808_pp0_iter2_reg;
wire   [31:0] u_fu_278_p1;
reg   [31:0] u_reg_812;
reg   [31:0] u_1_reg_817;
wire   [31:0] u_2_fu_292_p1;
reg   [31:0] u_2_reg_822;
reg   [31:0] u_3_reg_827;
wire   [0:0] brmerge_fu_610_p2;
reg   [0:0] brmerge_reg_852_pp0_iter4_reg;
reg   [0:0] brmerge_reg_852_pp0_iter5_reg;
reg   [0:0] brmerge_reg_852_pp0_iter6_reg;
reg   [0:0] brmerge_reg_852_pp0_iter7_reg;
reg   [0:0] brmerge_reg_852_pp0_iter8_reg;
reg   [0:0] brmerge_reg_852_pp0_iter9_reg;
reg   [0:0] brmerge_reg_852_pp0_iter10_reg;
reg   [0:0] brmerge_reg_852_pp0_iter11_reg;
reg   [5:0] local_C_addr_reg_856;
reg   [5:0] local_C_addr_reg_856_pp0_iter4_reg;
reg   [5:0] local_C_addr_reg_856_pp0_iter5_reg;
reg   [5:0] local_C_addr_reg_856_pp0_iter6_reg;
reg   [5:0] local_C_addr_reg_856_pp0_iter7_reg;
reg   [5:0] local_C_addr_reg_856_pp0_iter8_reg;
reg   [5:0] local_C_addr_reg_856_pp0_iter9_reg;
reg   [5:0] local_C_addr_reg_856_pp0_iter10_reg;
reg   [5:0] local_C_addr_reg_856_pp0_iter11_reg;
reg   [5:0] local_C_addr_reg_856_pp0_iter12_reg;
wire   [31:0] local_C_q0;
reg   [31:0] local_C_load_reg_862;
wire   [31:0] grp_fu_205_p2;
reg   [31:0] mul_reg_867;
wire   [31:0] grp_fu_209_p2;
reg   [31:0] mul_1_reg_872;
reg   [31:0] mul_1_reg_872_pp0_iter5_reg;
reg   [31:0] mul_1_reg_872_pp0_iter6_reg;
reg   [31:0] mul_1_reg_872_pp0_iter7_reg;
reg   [31:0] mul_1_reg_872_pp0_iter8_reg;
wire   [31:0] grp_fu_197_p2;
reg   [31:0] add_reg_877;
wire   [31:0] grp_fu_201_p2;
reg   [31:0] add_1_reg_882;
reg    ap_condition_exit_pp0_iter3_stage0;
wire   [5:0] local_C_address0;
reg    local_C_ce0;
reg    local_C_ce1;
reg    local_C_we1;
wire   [63:0] p_cast_fu_634_p1;
reg   [3:0] c7_fu_106;
wire   [3:0] add_ln747_fu_639_p2;
wire    ap_loop_init;
reg   [3:0] c6_fu_110;
wire   [3:0] select_ln745_1_fu_590_p3;
reg   [7:0] indvar_flatten_fu_114;
wire   [7:0] select_ln745_2_fu_651_p3;
reg   [3:0] c5_fu_118;
wire   [3:0] select_ln743_1_fu_546_p3;
reg   [10:0] indvar_flatten12_fu_122;
wire   [10:0] select_ln743_2_fu_665_p3;
reg   [2:0] c2_fu_126;
wire   [2:0] select_ln740_1_fu_494_p3;
reg   [12:0] indvar_flatten34_fu_130;
wire   [12:0] select_ln740_2_fu_679_p3;
reg   [14:0] indvar_flatten64_fu_134;
wire   [14:0] select_ln739_1_fu_693_p3;
reg   [15:0] indvar_flatten102_fu_138;
wire   [15:0] add_ln738_fu_267_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten102_load;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_205_p0;
wire   [31:0] grp_fu_205_p1;
wire   [31:0] grp_fu_209_p0;
wire   [31:0] grp_fu_209_p1;
wire   [0:0] icmp_ln739_fu_346_p2;
wire   [0:0] icmp_ln747_fu_358_p2;
wire   [0:0] xor_ln738_fu_352_p2;
wire   [0:0] icmp_ln745_fu_370_p2;
wire   [0:0] icmp_ln740_fu_388_p2;
wire   [0:0] and_ln738_3_fu_394_p2;
wire   [0:0] or_ln739_fu_400_p2;
wire   [0:0] xor_ln739_fu_414_p2;
wire   [0:0] and_ln738_fu_364_p2;
wire   [0:0] or_ln739_1_fu_420_p2;
wire   [0:0] and_ln738_1_fu_376_p2;
wire   [0:0] icmp_ln743_fu_382_p2;
wire   [0:0] and_ln738_2_fu_438_p2;
wire   [2:0] select_ln739_fu_406_p3;
wire   [0:0] and_ln739_2_fu_444_p2;
wire   [0:0] or_ln740_fu_456_p2;
wire   [0:0] or_ln740_1_fu_462_p2;
wire   [0:0] and_ln739_fu_426_p2;
wire   [0:0] xor_ln740_fu_476_p2;
wire   [0:0] and_ln739_1_fu_432_p2;
wire   [2:0] c2_2_fu_450_p2;
wire   [3:0] select_ln740_fu_468_p3;
wire   [0:0] and_ln740_1_fu_488_p2;
wire   [0:0] or_ln743_fu_508_p2;
wire   [0:0] or_ln743_2_fu_514_p2;
wire   [0:0] xor_ln743_fu_528_p2;
wire   [0:0] and_ln740_fu_482_p2;
wire   [0:0] or_ln743_1_fu_534_p2;
wire   [3:0] c5_2_fu_502_p2;
wire   [3:0] select_ln743_fu_520_p3;
wire   [0:0] and_ln743_fu_540_p2;
wire   [0:0] or_ln745_fu_560_p2;
wire   [0:0] or_ln745_1_fu_566_p2;
wire   [0:0] or_ln745_2_fu_572_p2;
wire   [3:0] select_ln745_fu_578_p3;
wire   [3:0] add_ln745_fu_554_p2;
wire   [0:0] cmp_i_i99_not_fu_598_p2;
wire   [0:0] cmp_i_i_not_fu_604_p2;
wire   [2:0] trunc_ln745_fu_586_p1;
wire   [5:0] tmp_fu_620_p3;
wire   [5:0] select_ln745_1_cast_fu_616_p1;
wire   [5:0] empty_fu_628_p2;
wire   [7:0] add_ln745_1_fu_645_p2;
wire   [10:0] add_ln743_1_fu_659_p2;
wire   [12:0] add_ln740_1_fu_673_p2;
wire   [14:0] add_ln739_fu_687_p2;
reg    grp_fu_197_ce;
reg    grp_fu_201_ce;
reg    grp_fu_205_ce;
reg    grp_fu_209_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 c7_fu_106 = 4'd0;
#0 c6_fu_110 = 4'd0;
#0 indvar_flatten_fu_114 = 8'd0;
#0 c5_fu_118 = 4'd0;
#0 indvar_flatten12_fu_122 = 11'd0;
#0 c2_fu_126 = 3'd0;
#0 indvar_flatten34_fu_130 = 13'd0;
#0 indvar_flatten64_fu_134 = 15'd0;
#0 indvar_flatten102_fu_138 = 16'd0;
#0 ap_done_reg = 1'b0;
end

kernel0_PE_local_C_RAM_2P_BRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
local_C_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(local_C_address0),
    .ce0(local_C_ce0),
    .q0(local_C_q0),
    .address1(local_C_addr_reg_856_pp0_iter12_reg),
    .ce1(local_C_ce1),
    .we1(local_C_we1),
    .d1(add_1_reg_882)
);

kernel0_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(local_C_load_reg_862),
    .din1(mul_reg_867),
    .ce(grp_fu_197_ce),
    .dout(grp_fu_197_p2)
);

kernel0_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_reg_877),
    .din1(mul_1_reg_872_pp0_iter8_reg),
    .ce(grp_fu_201_ce),
    .dout(grp_fu_201_p2)
);

kernel0_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_205_p0),
    .din1(grp_fu_205_p1),
    .ce(grp_fu_205_ce),
    .dout(grp_fu_205_p2)
);

kernel0_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_209_p0),
    .din1(grp_fu_209_p1),
    .ce(grp_fu_209_ce),
    .dout(grp_fu_209_p2)
);

kernel0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter3_stage0)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            c2_fu_126 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln738_reg_808_pp0_iter2_reg == 1'd0))) begin
            c2_fu_126 <= select_ln740_1_fu_494_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            c5_fu_118 <= 4'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln738_reg_808_pp0_iter2_reg == 1'd0))) begin
            c5_fu_118 <= select_ln743_1_fu_546_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            c6_fu_110 <= 4'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln738_reg_808_pp0_iter2_reg == 1'd0))) begin
            c6_fu_110 <= select_ln745_1_fu_590_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            c7_fu_106 <= 4'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln738_reg_808_pp0_iter2_reg == 1'd0))) begin
            c7_fu_106 <= add_ln747_fu_639_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln738_fu_261_p2 == 1'd0))) begin
            indvar_flatten102_fu_138 <= add_ln738_fu_267_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten102_fu_138 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            indvar_flatten12_fu_122 <= 11'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln738_reg_808_pp0_iter2_reg == 1'd0))) begin
            indvar_flatten12_fu_122 <= select_ln743_2_fu_665_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            indvar_flatten34_fu_130 <= 13'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln738_reg_808_pp0_iter2_reg == 1'd0))) begin
            indvar_flatten34_fu_130 <= select_ln740_2_fu_679_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            indvar_flatten64_fu_134 <= 15'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln738_reg_808_pp0_iter2_reg == 1'd0))) begin
            indvar_flatten64_fu_134 <= select_ln739_1_fu_693_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            indvar_flatten_fu_114 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln738_reg_808_pp0_iter2_reg == 1'd0))) begin
            indvar_flatten_fu_114 <= select_ln745_2_fu_651_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_1_reg_882 <= grp_fu_201_p2;
        add_reg_877 <= grp_fu_197_p2;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        brmerge_reg_852 <= brmerge_fu_610_p2;
        brmerge_reg_852_pp0_iter10_reg <= brmerge_reg_852_pp0_iter9_reg;
        brmerge_reg_852_pp0_iter11_reg <= brmerge_reg_852_pp0_iter10_reg;
        brmerge_reg_852_pp0_iter12_reg <= brmerge_reg_852_pp0_iter11_reg;
        brmerge_reg_852_pp0_iter4_reg <= brmerge_reg_852;
        brmerge_reg_852_pp0_iter5_reg <= brmerge_reg_852_pp0_iter4_reg;
        brmerge_reg_852_pp0_iter6_reg <= brmerge_reg_852_pp0_iter5_reg;
        brmerge_reg_852_pp0_iter7_reg <= brmerge_reg_852_pp0_iter6_reg;
        brmerge_reg_852_pp0_iter8_reg <= brmerge_reg_852_pp0_iter7_reg;
        brmerge_reg_852_pp0_iter9_reg <= brmerge_reg_852_pp0_iter8_reg;
        icmp_ln738_reg_808_pp0_iter2_reg <= icmp_ln738_reg_808_pp0_iter1_reg;
        local_C_addr_reg_856 <= p_cast_fu_634_p1;
        local_C_addr_reg_856_pp0_iter10_reg <= local_C_addr_reg_856_pp0_iter9_reg;
        local_C_addr_reg_856_pp0_iter11_reg <= local_C_addr_reg_856_pp0_iter10_reg;
        local_C_addr_reg_856_pp0_iter12_reg <= local_C_addr_reg_856_pp0_iter11_reg;
        local_C_addr_reg_856_pp0_iter4_reg <= local_C_addr_reg_856;
        local_C_addr_reg_856_pp0_iter5_reg <= local_C_addr_reg_856_pp0_iter4_reg;
        local_C_addr_reg_856_pp0_iter6_reg <= local_C_addr_reg_856_pp0_iter5_reg;
        local_C_addr_reg_856_pp0_iter7_reg <= local_C_addr_reg_856_pp0_iter6_reg;
        local_C_addr_reg_856_pp0_iter8_reg <= local_C_addr_reg_856_pp0_iter7_reg;
        local_C_addr_reg_856_pp0_iter9_reg <= local_C_addr_reg_856_pp0_iter8_reg;
        mul_1_reg_872 <= grp_fu_209_p2;
        mul_1_reg_872_pp0_iter5_reg <= mul_1_reg_872;
        mul_1_reg_872_pp0_iter6_reg <= mul_1_reg_872_pp0_iter5_reg;
        mul_1_reg_872_pp0_iter7_reg <= mul_1_reg_872_pp0_iter6_reg;
        mul_1_reg_872_pp0_iter8_reg <= mul_1_reg_872_pp0_iter7_reg;
        mul_reg_867 <= grp_fu_205_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln738_reg_808 <= icmp_ln738_fu_261_p2;
        icmp_ln738_reg_808_pp0_iter1_reg <= icmp_ln738_reg_808;
        u_1_reg_817 <= {{fifo_A_PE_1_12_dout[63:32]}};
        u_2_reg_822 <= u_2_fu_292_p1;
        u_3_reg_827 <= {{fifo_B_PE_1_1_dout[63:32]}};
        u_reg_812 <= u_fu_278_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        local_C_load_reg_862 <= local_C_q0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln738_fu_261_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln738_reg_808_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten102_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten102_load = indvar_flatten102_fu_138;
    end
end

always @ (*) begin
    if (((icmp_ln738_reg_808 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        fifo_A_PE_1_12_blk_n = fifo_A_PE_1_12_empty_n;
    end else begin
        fifo_A_PE_1_12_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln738_reg_808 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fifo_A_PE_1_12_read = 1'b1;
    end else begin
        fifo_A_PE_1_12_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln738_reg_808 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        fifo_A_PE_1_2_blk_n = fifo_A_PE_1_2_full_n;
    end else begin
        fifo_A_PE_1_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln738_reg_808 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fifo_A_PE_1_2_write = 1'b1;
    end else begin
        fifo_A_PE_1_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln738_reg_808 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        fifo_B_PE_1_1_blk_n = fifo_B_PE_1_1_empty_n;
    end else begin
        fifo_B_PE_1_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln738_reg_808 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fifo_B_PE_1_1_read = 1'b1;
    end else begin
        fifo_B_PE_1_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln738_reg_808 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        fifo_B_PE_2_1_blk_n = fifo_B_PE_2_1_full_n;
    end else begin
        fifo_B_PE_2_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln738_reg_808 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fifo_B_PE_2_1_write = 1'b1;
    end else begin
        fifo_B_PE_2_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (brmerge_reg_852_pp0_iter12_reg == 1'd0))) begin
        fifo_C_drain_PE_1_1_blk_n = fifo_C_drain_PE_1_1_full_n;
    end else begin
        fifo_C_drain_PE_1_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (brmerge_reg_852_pp0_iter12_reg == 1'd0))) begin
        fifo_C_drain_PE_1_1_write = 1'b1;
    end else begin
        fifo_C_drain_PE_1_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_197_ce = 1'b1;
    end else begin
        grp_fu_197_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_201_ce = 1'b1;
    end else begin
        grp_fu_201_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_205_ce = 1'b1;
    end else begin
        grp_fu_205_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_209_ce = 1'b1;
    end else begin
        grp_fu_209_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        local_C_ce0 = 1'b1;
    end else begin
        local_C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        local_C_ce1 = 1'b1;
    end else begin
        local_C_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        local_C_we1 = 1'b1;
    end else begin
        local_C_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln738_fu_267_p2 = (ap_sig_allocacmp_indvar_flatten102_load + 16'd1);

assign add_ln739_fu_687_p2 = (indvar_flatten64_fu_134 + 15'd1);

assign add_ln740_1_fu_673_p2 = (indvar_flatten34_fu_130 + 13'd1);

assign add_ln743_1_fu_659_p2 = (indvar_flatten12_fu_122 + 11'd1);

assign add_ln745_1_fu_645_p2 = (indvar_flatten_fu_114 + 8'd1);

assign add_ln745_fu_554_p2 = (select_ln743_fu_520_p3 + 4'd1);

assign add_ln747_fu_639_p2 = (select_ln745_fu_578_p3 + 4'd1);

assign and_ln738_1_fu_376_p2 = (xor_ln738_fu_352_p2 & icmp_ln745_fu_370_p2);

assign and_ln738_2_fu_438_p2 = (xor_ln738_fu_352_p2 & icmp_ln743_fu_382_p2);

assign and_ln738_3_fu_394_p2 = (xor_ln738_fu_352_p2 & icmp_ln740_fu_388_p2);

assign and_ln738_fu_364_p2 = (xor_ln738_fu_352_p2 & icmp_ln747_fu_358_p2);

assign and_ln739_1_fu_432_p2 = (or_ln739_1_fu_420_p2 & and_ln738_1_fu_376_p2);

assign and_ln739_2_fu_444_p2 = (or_ln739_1_fu_420_p2 & and_ln738_2_fu_438_p2);

assign and_ln739_fu_426_p2 = (or_ln739_1_fu_420_p2 & and_ln738_fu_364_p2);

assign and_ln740_1_fu_488_p2 = (xor_ln740_fu_476_p2 & and_ln739_1_fu_432_p2);

assign and_ln740_fu_482_p2 = (xor_ln740_fu_476_p2 & and_ln739_fu_426_p2);

assign and_ln743_fu_540_p2 = (or_ln743_1_fu_534_p2 & and_ln740_fu_482_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage0_iter13)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage0_iter13)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state14_pp0_stage0_iter13)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)));
end

always @ (*) begin
    ap_block_state14_pp0_stage0_iter13 = ((brmerge_reg_852_pp0_iter12_reg == 1'd0) & (fifo_C_drain_PE_1_1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((fifo_B_PE_2_1_full_n == 1'b0) & (icmp_ln738_reg_808 == 1'd0)) | ((fifo_B_PE_1_1_empty_n == 1'b0) & (icmp_ln738_reg_808 == 1'd0)) | ((icmp_ln738_reg_808 == 1'd0) & (fifo_A_PE_1_12_empty_n == 1'b0)) | ((fifo_A_PE_1_2_full_n == 1'b0) & (icmp_ln738_reg_808 == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign brmerge_fu_610_p2 = (cmp_i_i_not_fu_604_p2 | cmp_i_i99_not_fu_598_p2);

assign c2_2_fu_450_p2 = (select_ln739_fu_406_p3 + 3'd1);

assign c5_2_fu_502_p2 = (select_ln740_fu_468_p3 + 4'd1);

assign cmp_i_i99_not_fu_598_p2 = ((select_ln740_1_fu_494_p3 != 3'd3) ? 1'b1 : 1'b0);

assign cmp_i_i_not_fu_604_p2 = ((select_ln743_1_fu_546_p3 != 4'd7) ? 1'b1 : 1'b0);

assign empty_fu_628_p2 = (tmp_fu_620_p3 + select_ln745_1_cast_fu_616_p1);

assign fifo_A_PE_1_2_din = fifo_A_PE_1_12_dout;

assign fifo_B_PE_2_1_din = fifo_B_PE_1_1_dout;

assign fifo_C_drain_PE_1_1_din = add_1_reg_882;

assign grp_fu_205_p0 = u_reg_812;

assign grp_fu_205_p1 = u_2_reg_822;

assign grp_fu_209_p0 = u_1_reg_817;

assign grp_fu_209_p1 = u_3_reg_827;

assign icmp_ln738_fu_261_p2 = ((ap_sig_allocacmp_indvar_flatten102_load == 16'd32768) ? 1'b1 : 1'b0);

assign icmp_ln739_fu_346_p2 = ((indvar_flatten64_fu_134 == 15'd8192) ? 1'b1 : 1'b0);

assign icmp_ln740_fu_388_p2 = ((indvar_flatten34_fu_130 == 13'd2048) ? 1'b1 : 1'b0);

assign icmp_ln743_fu_382_p2 = ((indvar_flatten12_fu_122 == 11'd512) ? 1'b1 : 1'b0);

assign icmp_ln745_fu_370_p2 = ((indvar_flatten_fu_114 == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln747_fu_358_p2 = ((c7_fu_106 == 4'd8) ? 1'b1 : 1'b0);

assign local_C_address0 = p_cast_fu_634_p1;

assign or_ln739_1_fu_420_p2 = (xor_ln739_fu_414_p2 | icmp_ln739_fu_346_p2);

assign or_ln739_fu_400_p2 = (icmp_ln739_fu_346_p2 | and_ln738_3_fu_394_p2);

assign or_ln740_1_fu_462_p2 = (or_ln740_fu_456_p2 | icmp_ln739_fu_346_p2);

assign or_ln740_fu_456_p2 = (and_ln739_2_fu_444_p2 | and_ln738_3_fu_394_p2);

assign or_ln743_1_fu_534_p2 = (xor_ln743_fu_528_p2 | and_ln739_2_fu_444_p2);

assign or_ln743_2_fu_514_p2 = (or_ln743_fu_508_p2 | or_ln739_fu_400_p2);

assign or_ln743_fu_508_p2 = (and_ln740_1_fu_488_p2 | and_ln739_2_fu_444_p2);

assign or_ln745_1_fu_566_p2 = (or_ln745_fu_560_p2 | or_ln740_fu_456_p2);

assign or_ln745_2_fu_572_p2 = (or_ln745_1_fu_566_p2 | icmp_ln739_fu_346_p2);

assign or_ln745_fu_560_p2 = (and_ln743_fu_540_p2 | and_ln740_1_fu_488_p2);

assign p_cast_fu_634_p1 = empty_fu_628_p2;

assign select_ln739_1_fu_693_p3 = ((icmp_ln739_fu_346_p2[0:0] == 1'b1) ? 15'd1 : add_ln739_fu_687_p2);

assign select_ln739_fu_406_p3 = ((or_ln739_fu_400_p2[0:0] == 1'b1) ? 3'd0 : c2_fu_126);

assign select_ln740_1_fu_494_p3 = ((and_ln739_2_fu_444_p2[0:0] == 1'b1) ? c2_2_fu_450_p2 : select_ln739_fu_406_p3);

assign select_ln740_2_fu_679_p3 = ((or_ln739_fu_400_p2[0:0] == 1'b1) ? 13'd1 : add_ln740_1_fu_673_p2);

assign select_ln740_fu_468_p3 = ((or_ln740_1_fu_462_p2[0:0] == 1'b1) ? 4'd0 : c5_fu_118);

assign select_ln743_1_fu_546_p3 = ((and_ln740_1_fu_488_p2[0:0] == 1'b1) ? c5_2_fu_502_p2 : select_ln740_fu_468_p3);

assign select_ln743_2_fu_665_p3 = ((or_ln740_1_fu_462_p2[0:0] == 1'b1) ? 11'd1 : add_ln743_1_fu_659_p2);

assign select_ln743_fu_520_p3 = ((or_ln743_2_fu_514_p2[0:0] == 1'b1) ? 4'd0 : c6_fu_110);

assign select_ln745_1_cast_fu_616_p1 = select_ln745_1_fu_590_p3;

assign select_ln745_1_fu_590_p3 = ((and_ln743_fu_540_p2[0:0] == 1'b1) ? add_ln745_fu_554_p2 : select_ln743_fu_520_p3);

assign select_ln745_2_fu_651_p3 = ((or_ln743_2_fu_514_p2[0:0] == 1'b1) ? 8'd1 : add_ln745_1_fu_645_p2);

assign select_ln745_fu_578_p3 = ((or_ln745_2_fu_572_p2[0:0] == 1'b1) ? 4'd0 : c7_fu_106);

assign tmp_fu_620_p3 = {{trunc_ln745_fu_586_p1}, {3'd0}};

assign trunc_ln745_fu_586_p1 = select_ln745_fu_578_p3[2:0];

assign u_2_fu_292_p1 = fifo_B_PE_1_1_dout[31:0];

assign u_fu_278_p1 = fifo_A_PE_1_12_dout[31:0];

assign xor_ln738_fu_352_p2 = (icmp_ln739_fu_346_p2 ^ 1'd1);

assign xor_ln739_fu_414_p2 = (icmp_ln740_fu_388_p2 ^ 1'd1);

assign xor_ln740_fu_476_p2 = (1'd1 ^ and_ln739_2_fu_444_p2);

assign xor_ln743_fu_528_p2 = (1'd1 ^ and_ln739_1_fu_432_p2);

endmodule //kernel0_PE
